loadstring([[
-- Ventus Client-Side Script (Silent, Optimized)

--// Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")

--// Player
local lp = Players.LocalPlayer
local mouse = lp:GetMouse()

--// Config
local ballName = "ball" -- change if needed
local magnetRange = 75
local autoTuckEnabled = false
local magnetEnabled = false
local currentTheme = "dark"

--// UI Theme
local colorThemes = {
    dark = {primary = Color3.fromRGB(50,50,50), secondary = Color3.fromRGB(35,35,35)},
    light = {primary = Color3.fromRGB(240,240,240), secondary = Color3.fromRGB(200,200,200)},
}

--// Forcefield
local forcefield
local function createForcefield(char)
    if forcefield then forcefield:Destroy() end
    local hrp = char:WaitForChild("HumanoidRootPart")
    forcefield = Instance.new("Part")
    forcefield.Name = "VentusForcefield"
    forcefield.Shape = Enum.PartType.Ball
    forcefield.Anchored = true
    forcefield.CanCollide = false
    forcefield.Transparency = 0.7
    forcefield.Size = Vector3.new(magnetRange*2, magnetRange*2, magnetRange*2)
    forcefield.Color = Color3.fromRGB(0,170,255)
    forcefield.Parent = workspace

    RunService.RenderStepped:Connect(function()
        if forcefield and hrp then
            forcefield.Position = hrp.Position
        end
    end)
end

local function updateForcefieldSize()
    if forcefield then
        forcefield.Size = Vector3.new(magnetRange*2, magnetRange*2, magnetRange*2)
    end
end

--// Auto Tuck
RunService.RenderStepped:Connect(function()
    if autoTuckEnabled then
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(true,"Z",false,game)
        VirtualInputManager:SendKeyEvent(false,"Z",false,game)
    end
end)

--// Magnet (Click-to-Grab)
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton1 and magnetEnabled and lp.Character then
        local char = lp.Character
        local hand = char:FindFirstChild("RightHand") or char:FindFirstChild("Right Arm") or char:FindFirstChild("HumanoidRootPart")
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hand or not hrp then return end

        local closest, dist = nil, math.huge
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj:IsA("BasePart") and obj.Name:lower():match(ballName:lower()) then
                local mag = (obj.Position - hrp.Position).Magnitude
                if mag < dist and mag <= magnetRange then
                    closest, dist = obj, mag
                end
            end
        end

        if closest then
            closest.CFrame = CFrame.new(hand.Position)
        end
    end
end)

--// GUI
local gui = Instance.new("ScreenGui", game.CoreGui)
gui.Name = "VentusGUI"

local frame = Instance.new("Frame", gui)
frame.Size = UDim2.new(0,300,0,350)
frame.Position = UDim2.new(0.5,-150,0.5,-175)
frame.BackgroundColor3 = colorThemes[currentTheme].primary
frame.Active = true
frame.Draggable = true
Instance.new("UICorner", frame).CornerRadius = UDim.new(0,10)

local title = Instance.new("TextLabel", frame)
title.Size = UDim2.new(1,0,0,30)
title.BackgroundTransparency = 1
title.Text = "Ventus"
title.Font = Enum.Font.GothamBold
title.TextSize = 20
title.TextColor3 = Color3.fromRGB(255,255,255)

local mainContent = Instance.new("Frame", frame)
mainContent.Size = UDim2.new(1,0,1,-30)
mainContent.Position = UDim2.new(0,0,0,30)
mainContent.BackgroundColor3 = colorThemes[currentTheme].secondary
Instance.new("UICorner", mainContent).CornerRadius = UDim.new(0,10)

-- Slider
local function createSlider(parent, posY, text, minVal, maxVal, callback)
    local label = Instance.new("TextLabel", parent)
    label.Size = UDim2.new(1,0,0,20)
    label.Position = UDim2.new(0,0,0,posY)
    label.BackgroundTransparency = 1
    label.Text = text..": "..tostring(minVal)
    label.TextColor3 = Color3.fromRGB(255,255,255)
    label.Font = Enum.Font.Gotham
    label.TextSize = 14

    local slider = Instance.new("TextButton", parent)
    slider.Size = UDim2.new(1,0,0,20)
    slider.Position = UDim2.new(0,0,0,posY+20)
    slider.BackgroundColor3 = Color3.fromRGB(80,80,80)
    slider.Text = ""
    Instance.new("UICorner", slider).CornerRadius = UDim.new(0,8)

    local fill = Instance.new("Frame", slider)
    fill.BackgroundColor3 = colorThemes[currentTheme].primary
    fill.Size = UDim2.new(0,0,1,0)
    fill.Position = UDim2.new(0,0,0,0)
    Instance.new("UICorner", fill).CornerRadius = UDim.new(0,8)

    slider.MouseButton1Down:Connect(function()
        local moveConn, releaseConn
        moveConn = UserInputService.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                local rel = math.clamp((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X, 0, 1)
                local value = math.floor(minVal + (maxVal-minVal)*rel)
                fill.Size = UDim2.new(rel,0,1,0)
                label.Text = text..": "..value
                callback(value)
            end
        end)
        releaseConn = UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                moveConn:Disconnect()
                releaseConn:Disconnect()
            end
        end)
    end)
end

-- Toggle
local function createToggle(parent, posY, text, stateVar, callback)
    local btn = Instance.new("TextButton", parent)
    btn.Size = UDim2.new(1,0,0,30)
    btn.Position = UDim2.new(0,0,0,posY)
    btn.BackgroundColor3 = stateVar and colorThemes[currentTheme].primary or Color3.fromRGB(80,80,80)
    btn.TextColor3 = Color3.fromRGB(255,255,255)
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 14
    btn.Text = text..": "..(stateVar and "ON" or "OFF")
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,8)
    btn.MouseButton1Click:Connect(function()
        stateVar = not stateVar
        btn.BackgroundColor3 = stateVar and colorThemes[currentTheme].primary or Color3.fromRGB(80,80,80)
        btn.Text = text..": "..(stateVar and "ON" or "OFF")
        callback(stateVar)
    end)
end

-- UI Controls
createSlider(mainContent,0,"Magnet Range",magnetRange,300,function(v)
    magnetRange = v
    updateForcefieldSize()
end)
createToggle(mainContent,60,"Auto Tuck",autoTuckEnabled,function(state) autoTuckEnabled=state end)
createToggle(mainContent,100,"Magnet",magnetEnabled,function(state) magnetEnabled=state end)

-- Rejoin button
local rejoinBtn = Instance.new("TextButton", mainContent)
rejoinBtn.Size = UDim2.new(1,0,0,30)
rejoinBtn.Position = UDim2.new(0,0,0,310)
rejoinBtn.BackgroundColor3 = colorThemes[currentTheme].primary
rejoinBtn.TextColor3 = Color3.fromRGB(255,255,255)
rejoinBtn.Font = Enum.Font.GothamBold
rejoinBtn.TextSize = 14
rejoinBtn.Text="Rejoin"
Instance.new("UICorner",rejoinBtn).CornerRadius = UDim.new(0,8)
rejoinBtn.MouseButton1Click:Connect(function() TeleportService:Teleport(game.PlaceId, lp) end)

-- Toggle GUI with LeftAlt
UserInputService.InputBegan:Connect(function(input,processed)
    if not processed and input.KeyCode == Enum.KeyCode.LeftAlt then
        gui.Enabled = not gui.Enabled
    end
end)

-- Respawn
lp.CharacterAdded:Connect(function(char)
    char:WaitForChild("HumanoidRootPart")
    createForcefield(char)
end)

if lp.Character then
    lp.Character:WaitForChild("HumanoidRootPart")
    createForcefield(lp.Character)
end
]])()
